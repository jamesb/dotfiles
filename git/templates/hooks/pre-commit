#!/usr/bin/env bash
#
# A hook script to verify what is about to be committed, called by
# "git commit" with no arguments.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the commit.

# Significant exit codes
EX_FAIL=1

# Check for prerequisites
declare -a prereqs=("git" "basename" "leasot" "mdtodo")
for prog in "${prereqs[@]}" ; do
  command -v ${prog} > /dev/null 2>&1 || { echo >&2 "Program '${prog}' required but not found."; exit ${EX_FAIL}; }
done

PROGSELF=$(basename $0)

#############################################################################
# Check whether non-ASCII filenames are allowed.
#############################################################################
echo "${PROGSELF}: Checking for non-ASCII filenames..."

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Determine what to diff against; HEAD works for any established repo
if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

#############################################################################
# Check for TODO comments in committed code and document them.
#############################################################################
echo "${PROGSELF}: Processing TODO comments in the codebase..."
TODO_MARKDOWN_FILE=README.md
# If the TODO_MARKDOWN_FILE doesn't exist, create it
if [[ ! -f ${TODO_MARKDOWN_FILE} ]]; then
  touch ${TODO_MARKDOWN_FILE}
fi

# Prior to initial commit, there are no tree-ish objects. Detect this.
OBJECTS=$(git rev-list --objects --all)
if [[ ! -z "${OBJECTS}" ]]; then
  BRANCH=$(git rev-parse --abbrev-ref HEAD)
  BRANCH_FILES=($(git ls-tree -r --name-only $BRANCH))
fi

COMMIT_FILES=($(git diff --cached --name-only --diff-filter=ACM -z | xargs -0))
FILES=(${BRANCH_FILES} ${COMMIT_FILES})

# Remove duplicate filenames
FILES=($(echo "${FILES[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
echo "  ${FILES[@]}"

mdtodo -x -o ${TODO_MARKDOWN_FILE} ${FILES[@]}
if [ "$?" -ne 0 ]
then
  echo
  echo "New TODOs added to $TODO_MARKDOWN_FILE"
  echo "  (use "git add $TODO_MARKDOWN_FILE" to include them in this commit)"
  echo

  exit $?
fi

#############################################################################
# Stop accidental commits to "master" and "develop" branches.
# Credit: https://gist.github.com/stefansundin/9059706
#############################################################################
echo "${PROGSELF}: Checking commit branch..."
# Prior to initial commit, there are no tree-ish objects. Detect this.
OBJECTS=$(git rev-list --objects --all)
if [[ ! -z "${OBJECTS}" ]]; then
  BRANCH=`git rev-parse --abbrev-ref HEAD`
fi

if [[ "$BRANCH" == "master" || "$BRANCH" == "develop" ]]; then
  echo "You are on branch $BRANCH. Are you sure you want to commit to this branch?"
  echo "If so, commit with -n to bypass this pre-commit hook."
  exit 1
fi
