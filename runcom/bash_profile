# .bash_profile for James Bernsen
# https://github.com/jamesbernsen/dotfiles
#
# Credits:
#   https://github.com/webpro/dotfiles/blob/master/runcom/.bash_profile
#   https://github.com/mathiasbynens/dotfiles/blob/master/.bash_profile

# If not running interactively, don't do anything
[ -z "$PS1" ] && return


# I like a little verbosity...
echo "Sourcing .bash_profile ..."


# Resolve DOTFILES_DIR (assuming ~/dotfiles on distros without readlink and/or $BASH_SOURCE/$0)
READLINK=$(command -v greadlink || command -v readlink)
CURRENT_SCRIPT=$BASH_SOURCE

if [[ -n $CURRENT_SCRIPT && -x "$READLINK" ]]; then
  SCRIPT_PATH=$($READLINK -f "$CURRENT_SCRIPT")
  DOTFILES_DIR=$(dirname "$(dirname "$SCRIPT_PATH")")
elif [ -d "$HOME/dotfiles" ]; then
  DOTFILES_DIR="$HOME/dotfiles"
else
  echo "Unable to find dotfiles, exiting."
  return
fi


# Detect platform/OS and set PLATFORM variable
. $DOTFILES_DIR/platforms/detect.sh


# Start tmux unless the user escapes via keypress
# Credit: https://unix.stackexchange.com/questions/43601/how-can-i-set-my-default-shell-to-start-up-tmux
# JRB NOTE: On Cygwin, using bash's exec to launch tmux will launch it as
# Administrator when mintty is launched that way.
#
if command -v tmux>/dev/null; then
  if [[ $TERM =~ screen ]] ; then
    echo "Already running tmux: \$TERM == ${TERM}"
  elif [[ ! -z $TMUX ]] ; then
    echo "Already running tmux: \$TMUX == ${TMUX}"
  else
    if ! $DOTFILES_DIR/system/escape-hatch.sh 3 ; then
      echo "Starting tmux ..."
      exec tmux new-session -A -s base
    else
      echo "Skipping tmux ..."
    fi
  fi
else
  echo "Cannot find tmux in PATH"
fi

# Read cache
DOTFILES_CACHE="$DOTFILES_DIR/.cache.sh"
[ -f "$DOTFILES_CACHE" ] && . "$DOTFILES_CACHE"


# Finally we can source the dotfiles (order matters)
for DOTFILE in "$DOTFILES_DIR"/system/{function,function_*,path,env,alias,completion,grep,prompt,custom}.sh; do
  [ -f "$DOTFILE" ] && echo "Sourcing ${DOTFILE#$HOME/} ..." && source "$DOTFILE"
done


# Platform-specific files
plat=$(tolower $PLATFORM) # requires function from function_text.sh
for DOTFILE in "$DOTFILES_DIR"/system/{env,alias,function}.${plat}.sh ; do
  [ -f "$DOTFILE" ] && echo "Sourcing ${DOTFILE#$HOME/} ..." && source "$DOTFILE"
done


# Hook for machine-specific extra/custom stuff (not committed to Git)
EXTRA_DIR="$DOTFILES_DIR/extra"
if [ -d "$EXTRA_DIR" ]; then
  for EXTRAFILE in "$EXTRA_DIR"/runcom/*.sh; do
    [ -f "$EXTRAFILE" ] && echo "Sourcing ${EXTRAFILE#$HOME/} ..." && source "$EXTRAFILE"
  done
fi


# Clean up
unset READLINK CURRENT_SCRIPT SCRIPT_PATH DOTFILE EXTRAFILE


# Export
export DOTFILES_DIR EXTRA_DIR

